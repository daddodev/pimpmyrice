name: release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+a[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+b[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+rc[0-9]+"

env:
  PACKAGE_NAME: "pimpmyrice"
  AUTHOR_NAME: "daddodev"
  AUTHOR_EMAIL: "daddodev@gmail.com"
  LICENSE: "MIT"

jobs:
  details:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.release.outputs.new_version }}
      suffix: ${{ steps.release.outputs.suffix }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract tag and Details
        id: release
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            NEW_VERSION=$(echo $TAG_NAME | awk -F'-' '{print $1}')
            SUFFIX=$(echo $TAG_NAME | grep -oP '[a-z]+[0-9]+' || echo "")
            echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
            echo "suffix=$SUFFIX" >> "$GITHUB_OUTPUT"
            echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"
            echo "Version is $NEW_VERSION"
            echo "Suffix is $SUFFIX"
            echo "Tag name is $TAG_NAME"
          else
            echo "No tag found"
            exit 1
          fi

  setup_and_build:
    needs: [details]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install pypa/build
        run: python -m pip install build --user
      - name: Build a binary wheel and a source tarball
        run: python -m build

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/


  pypi_publish:
    name: Upload release to PyPI
    needs: [details, setup_and_build]
    runs-on: ubuntu-latest
    environment:
      name: release
    permissions:
      id-token: write
    steps:
      - name: Fetch information from PyPI
        run: |
          response=$(curl -s https://pypi.org/pypi/${{ env.PACKAGE_NAME }}/json || echo "{}")
          latest_previous_version=$(echo $response | jq --raw-output "select(.releases != null) | .releases | keys_unsorted | last")
          if [ -z "$latest_previous_version" ]; then
            echo "Package not found on PyPI."
            latest_previous_version="0.0.0"
          fi
          echo "Latest version on PyPI: $latest_previous_version"
          echo "latest_previous_version=$latest_previous_version" >> $GITHUB_ENV

      - name: Compare versions and exit if not newer
        run: |
          NEW_VERSION=${{ needs.details.outputs.new_version }}
          LATEST_VERSION=$latest_previous_version
          if [ "$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ] || [ "$NEW_VERSION" == "$LATEST_VERSION" ]; then
            echo "The new version $NEW_VERSION is not greater than the latest version $LATEST_VERSION on PyPI."
            exit 1
          else
            echo "The new version $NEW_VERSION is greater than the latest version $LATEST_VERSION on PyPI."
          fi

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1


  aur_publish:
    name: Update AUR package
    needs: [details]
    runs-on: ubuntu-latest
    environment:
      name: release
    steps:
      - uses: actions/checkout@v4

      - name: Fetch latest version from AUR
        run: |
          latest_aur_version=$(curl -s https://aur.archlinux.org/rpc/?v=5&type=info&arg=${{ env.PACKAGE_NAME }} | jq -r '.results.Version // "0.0.0"')
          echo "Latest version on AUR: $latest_aur_version"
          echo "latest_aur_version=$latest_aur_version" >> $GITHUB_ENV

      - name: Compare versions and exit if not newer
        run: |
          NEW_VERSION=${{ needs.details.outputs.new_version }}
          LATEST_VERSION=$latest_aur_version
          if [ "$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ] || [ "$NEW_VERSION" == "$LATEST_VERSION" ]; then
            echo "The new version $NEW_VERSION is not greater than the latest version $LATEST_VERSION on AUR."
            exit 1
          else
            echo "The new version $NEW_VERSION is greater than the latest version $LATEST_VERSION on AUR."
          fi

      - name: Generate PKGBUILD
        run: |
          cd packaging/aur
          bash generate_pkgbuild.sh ${{ env.PACKAGE_NAME }} ${{ needs.details.outputs.new_version }} ${{ env.AUTHOR_NAME }} ${{ env.AUTHOR_EMAIL }} ${{ env.LICENSE }}

      - name: Publish AUR package
        uses: KSXGitHub/github-actions-deploy-aur@v3.0.1
        with:
          pkgname: ${{ env.PACKAGE_NAME }}
          pkgbuild: ./PKGBUILD
          commit_username: ${{ secrets.AUR_USERNAME }}
          commit_email: ${{ secrets.AUR_EMAIL }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message: Update AUR package
          ssh_keyscan_types: rsa,ecdsa,ed25519


  ppa_publish:
    name: Upload release to Ubuntu PPA
    needs: [details, setup_and_build]
    runs-on: ubuntu-latest
    environment:
      name: release
    steps:
      - uses: actions/checkout@v4

      - name: Fetch latest version from PPA
        run: |
          latest_ppa_version=$(apt-cache policy ${{ env.PACKAGE_NAME }} | grep Candidate | awk '{print $2}')
          echo "Latest version on PPA: $latest_ppa_version"
          echo "latest_ppa_version=$latest_ppa_version" >> $GITHUB_ENV

      - name: Compare versions and exit if not newer
        run: |
          NEW_VERSION=${{ needs.details.outputs.new_version }}
          LATEST_VERSION=$latest_ppa_version
          if [ "$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ] || [ "$NEW_VERSION" == "$LATEST_VERSION" ]; then
            echo "The new version $NEW_VERSION is not greater than the latest version $LATEST_VERSION on PPA."
            exit 1
          else
            echo "The new version $NEW_VERSION is greater than the latest version $LATEST_VERSION on PPA."
          fi

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Publish to PPA
        uses: yuezk/publish-ppa-package@v2
        with:
          repository: "${{ env.AUTHOR_NAME }}/${{ env.PACKAGE_NAME }}"
          gpg_private_key: ${{ secrets.PPA_GPG_PRIVATE_KEY }}
          gpg_passphrase: ${{ secrets.PPA_GPG_PASSPHRASE }}
          deb_email: "${{ env.AUTHOR_EMAIL }}"
          deb_fullname: "${{ env.AUTHOR_NAME }}"
          tarball: dist/${{ env.PACKAGE_NAME }}-*.tar.gz
          debian_dir: packaging/ppa/debian

      - run: |
          find  /tmp/ -name "*.deb" -exec mv {} ./ \;

      - name: Upload .deb package as artifact
        uses: actions/upload-artifact@v3
        with:
          name: deb-package
          path: ./*.deb


  github_release:
    name: Create GitHub Release
    needs: [details, setup_and_build, ppa_publish]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Download .deb package
        uses: actions/download-artifact@v3
        with:
          name: deb-package
          path: dist/

      - name: Create GitHub Release
        id: create_release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ needs.details.outputs.tag_name }} dist/* --title ${{ needs.details.outputs.tag_name }} --generate-notes
